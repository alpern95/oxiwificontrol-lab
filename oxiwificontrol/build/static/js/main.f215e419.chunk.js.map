{"version":3,"sources":["authProvider.js","Dashboard.js","bornes.js","users.js","StopViewsButton.js","StartViewsButton.js","RefreshViewsButton.js","groupes.js","App.js","serviceWorker.js","index.js"],"names":["authProvider","login","username","password","request","Request","method","body","JSON","stringify","headers","Headers","fetch","then","response","status","Error","statusText","json","token","role","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","checkAuth","getItem","reject","getPermissions","useStyles","makeStyles","root","display","marginTop","zIndex","content","padding","img","width","minWidth","maxWidth","maxHeight","MyPage","classes","useAuthenticated","Card","CardHeader","title","CardContent","className","BorneList","props","List","Datagrid","rowClick","TextField","source","sortable","EditButton","BorneEdit","Edit","TabbedForm","FormTab","label","TextInput","PasswordInput","BorneCreate","Create","UserList","UserCreate","SimpleForm","StopViewsButton","selectedIds","refresh","useRefresh","notify","useNotify","unselectAll","useUnselectAll","useUpdateMany","views","onSuccess","onFailure","error","updateMany","loading","Button","disabled","onClick","StartViewsButton","RefreshViewsButton","PostBulkActionButtons","GroupeList","bulkActionButtons","MyLoginPage","Login","backgroundImage","dataProvider","simpleRestProvider","url","options","Accept","set","fetchUtils","fetchJson","App","Admin","loginPage","dashboard","Dashboard","permissions","Resource","name","list","edit","create","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f215e419.chunk.js","sourcesContent":["// in src/authProvider.js\n\nconst authProvider = {\n    login: ({ username, password }) =>  {\n        //const request = new Request('http://192.168.112.10:8081/api/v1/user/login',\n        const request = new Request('https://192.168.112.10:4431/api/v1/user/login', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        });\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(({ token,role}) => {\n                localStorage.setItem('token', token);\n                localStorage.setItem('username', username);\n                localStorage.setItem('permissions', role);\n                return Promise.resolve();\n            })\n    },\n\n    logout: () => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('token');\n        localStorage.removeItem('permissions');\n        return Promise.resolve();\n    },\n\n    checkError: () => Promise.resolve(),\n\n    checkAuth: () => {\n        //localStorage.getItem('username') ? Promise.resolve() : Promise.reject(),\n        return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n    },\n\n    getPermissions: () => {\n        const role = localStorage.getItem('permissions');\n        return role ? Promise.resolve(role) : Promise.reject();\n    },\n};\nexport default authProvider\n","// in src/Dashboard.js\nimport * as React from \"react\";\nimport { Card, CardContent, CardHeader } from '@material-ui/core';\nimport { useAuthenticated } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\n//import { FieldProps, Product } from '../types';\n\nconst useStyles = makeStyles({\n    root: { display: 'inline-block', marginTop: '1em', zIndex: 2 },\n    content: { padding: 0, '&:last-child': { padding: 0 } },\n    img: {\n        width: 'initial',\n        minWidth: 'initial',\n        maxWidth: '42em',\n        maxHeight: '15em',\n    },\n});\n\nconst MyPage = () => {\n    const classes = useStyles();\n    useAuthenticated(); // redirects to login if not authenticated\n    return (\n        <div>\n        <Card>\n          <CardHeader title=\"Bienvenue sur OxiWifiControl\" />\n            <CardContent className={classes.content}>\n                <br />- Application de gestion des bornes wifi\n                <br />\n                <br />  Vous pourrez:\n                <br />  - Allumer une borne wifi\n                <br />  - Etteindre une borne wifi\n                <br />  - Connaitre l'Ã©tat d'une borne wifi\n\n            </CardContent>\n        </Card>\n\n        </div>\n    )\n};\n\nexport default MyPage;\n","import * as React from \"react\";\nimport { List, Edit, Create, TabbedForm,FormTab,TextInput, Datagrid, TextField, EditButton,PasswordInput } from 'react-admin';\n\nexport const BorneList = props => (\n    <List {...props} >\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"nom\" sortable={false} />\n            <TextField source=\"description\" sortable={false} /> \n            <TextField source=\"groupe\" sortable={false} />\n            <TextField source=\"etat\" sortable={false} />\n            <TextField source=\"lastrefresh\" sortable={false} />\n            <EditButton />\n        </Datagrid>\n    </List>\n);\n\nexport const BorneEdit = props => (\n    <Edit {...props} >\n    <TabbedForm>\n      <FormTab\n          label=\"base\"\n      >\n      <TextInput source=\"nom\" />\n      <TextInput source=\"description\" />\n      </FormTab>\n    \n        <FormTab \n        label=\"dÃ©tail\" \n        >\n        <TextInput source=\"device\" />\n        <TextInput source=\"adresse\" />\n        <TextInput source=\"groupe\" />\n        <TextInput source=\"username\" />\n        <PasswordInput source=\"password\" />\n        <PasswordInput source=\"enablepassword\" />\n        <TextInput source=\"interface\" />\n        <TextInput source=\"etat\" />\n        <TextInput source=\"lastrefresh\" />\n      </FormTab>\n    </TabbedForm>\n  </Edit>\n);\n\nexport const BorneCreate = props => (\n    <Create {...props} >\n    <TabbedForm>\n      <FormTab\n          label=\"base\"\n      >\n      <TextInput source=\"nom\" />\n      <TextInput source=\"description\" />\n      </FormTab>\n        <FormTab\n        label=\"details\"\n        >\n        <TextInput source=\"device\" />\n        <TextInput source=\"adresse\" />\n        <TextInput source=\"groupe\" />\n        <TextInput source=\"username\" />\n        <PasswordInput source=\"password\" />\n        <PasswordInput source=\"enablepassword\" />\n        <TextInput source=\"interface\" />\n        <TextInput source=\"etat\" />\n        <TextInput source=\"lastrefresh\" />\n      </FormTab>\n    </TabbedForm>\n  </Create>\n);\n","import * as React from \"react\";\nimport { List, Create, SimpleForm, TextInput, Datagrid, TextField, PasswordInput } from 'react-admin';\n\nexport const UserList = props => (\n    <List {...props} >\n        <Datagrid >\n            <TextField source=\"username\" sortable={false} />\n            <TextField source=\"email\" sortable={false} />\n            <TextField source=\"role\" sortable={false} />\n        </Datagrid>\n    </List>\n);\n\n//export const UserEdit = props => (\n//    <Edit {...props} >\n//      <SimpleForm >\n//        <TextInput source=\"username\" />\n//        <PasswordInput source=\"password\" />\n//        <TextInput source=\"email\" />\n//        <TextInput source=\"role\" />\n//        </SimpleForm>\n//    </Edit>\n//);\n\nexport const UserCreate = props => (\n    <Create {...props} >\n        <SimpleForm >\n        <TextInput source=\"username\" />\n        <PasswordInput source=\"password\" />\n        <TextInput source=\"email\" />\n        <TextInput source=\"role\" />\n        </SimpleForm>\n    </Create>\n);\n","// in ./StopViewsButton.js\nimport * as React from \"react\";\nimport {\n    Button,\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n} from 'react-admin';\n//import { VisibilityOff } from '@material-ui/icons';\nimport StopIcon from '@material-ui/icons/Stop';\n//import PlayArrowIcon from '@material-ui/icons/PlayArrow';\n\nconst StopViewsButton = ({ selectedIds }) => {\n    const refresh = useRefresh();\n    const notify = useNotify();\n    const unselectAll = useUnselectAll();\n    const [updateMany, { loading }] = useUpdateMany(\n        'groupe/stop',\n        selectedIds,\n        { views: 0 },\n        {\n            onSuccess: () => {\n                refresh();\n                notify('Borne updated');\n                unselectAll('groupes');\n            },\n            onFailure: error => notify('Error: groupes not updated', 'warning'),\n        }\n    );\n\n    return (\n        <Button\n            label=\"StopBorne\"\n            disabled={loading}\n            onClick={updateMany}\n        >\n            <StopIcon />\n        </Button>\n    );\n};\n\nexport default StopViewsButton;\n","// in ./StartViewsButton.js\nimport * as React from \"react\";\nimport {\n    Button,\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n} from 'react-admin';\n//import { VisibilityOff } from '@material-ui/icons';\n//import StopIcon from '@material-ui/icons/Stop';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\n\nconst StartViewsButton = ({ selectedIds }) => {\n    const refresh = useRefresh();\n    const notify = useNotify();\n    const unselectAll = useUnselectAll();\n    const [updateMany, { loading }] = useUpdateMany(\n        'groupe/start',\n        selectedIds,\n        { views: 0 },\n        {\n            onSuccess: () => {\n                refresh();\n                notify('Borne updated');\n                unselectAll('groupes');\n            },\n            onFailure: error => notify('Error: groupes not updated', 'warning'),\n        }\n    );\n\n    return (\n        <Button\n            label=\"StartBorne\"\n            disabled={loading}\n            onClick={updateMany}\n        >\n            <PlayArrowIcon />\n        </Button>\n    );\n};\n\nexport default StartViewsButton;\n","// in ./RefreshViewsButton.js\nimport * as React from \"react\";\nimport {\n    Button,\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n} from 'react-admin';\nimport RefreshIcon from '@material-ui/icons/Refresh';\n\nconst RefreshViewsButton = ({ selectedIds }) => {\n    const refresh = useRefresh();\n    const notify = useNotify();\n    const unselectAll = useUnselectAll();\n    const [updateMany, { loading }] = useUpdateMany(\n        'groupe/refresh',\n        selectedIds,\n        { views: 0 },\n        {\n            onSuccess: () => {\n                refresh();\n                notify('Borne updated');\n                unselectAll('groupes');\n            },\n            onFailure: error => notify('Error: groupes not updated', 'warning'),\n        }\n    );\n\n    return (\n        <Button\n            label=\"RefreshBorne\"\n            disabled={loading}\n            onClick={updateMany}\n        >\n            <RefreshIcon />\n        </Button>\n    );\n};\n\nexport default RefreshViewsButton;\n","import * as React from \"react\";\nimport { List, Datagrid, TextField } from 'react-admin';\n// You can replace the list of default actions by your own element using the actions prop\nimport { Fragment } from 'react';\n//import Button from '@material-ui/core/Button';\nimport StopViewsButton from './StopViewsButton';\nimport StartViewsButton from './StartViewsButton';\nimport RefreshViewsButton from './RefreshViewsButton';\n//import { useQuery, Loading, Error } from 'react-admin';\n\n//Add custom action\n\nconst PostBulkActionButtons = props => (\n\t    <Fragment>\n            <StopViewsButton label=\"Stop Views\" {...props} />\n            <StartViewsButton label=\"Start Views\" {...props} />\n            <RefreshViewsButton label=\"Refresh Views\" {...props} />\n            {/* default bulk delete action */}\n        </Fragment>\n);\n\n//Visu liste par groupe\nexport const GroupeList = ({  ...props }) => (\n    <List {...props} title=\"Liste des bornes de votre groupe\" bulkActionButtons={<PostBulkActionButtons />}>\n        <Datagrid >\n            <TextField source=\"nom\" sortable={false} />\n            <TextField source=\"description\" sortable={false} /> \n            <TextField source=\"groupe\" sortable={false} />\n            <TextField source=\"etat\" sortable={false} />\n            <TextField source=\"lastrefresh\" sortable={false} />\n        </Datagrid>\n    </List>\n);\n","//  in src/App.js\nimport * as React from \"react\";\nimport { Admin, Login, Resource } from 'react-admin';\nimport simpleRestProvider from 'ra-data-simple-rest';\nimport { fetchUtils } from 'react-admin';\nimport authProvider from './authProvider';\nimport Dashboard from './Dashboard';\nimport { BorneList, BorneEdit, BorneCreate} from './bornes';\nimport { UserList,  UserCreate} from'./users';\nimport { GroupeList} from './groupes';\n\n//import MyLayout from './MyLayout';\n\nconst MyLoginPage = () => <Login backgroundImage=\"/background.jpg\" />;\n\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n    //options.headers.set('X-Total-Count');\n\n    const token = localStorage.getItem('token');\n    //const role = localStorage.getItem('permissions');\n    options.headers.set('Authorization', `Bearer ${token}`);\n    return fetchUtils.fetchJson(url, options);\n};\n\n//const dataProvider = simpleRestProvider('http://192.168.112.10:8081/api/v1', httpClient);\nconst dataProvider = simpleRestProvider('https://192.168.112.10:4431/api/v1',httpClient);\n//const dataProviser = simpleRestProviser(REAC_APP_OXIWIFICONTROLADDR,httpClient);\n\nconst App = () => (\n    <Admin loginPage={MyLoginPage} \n        dashboard={Dashboard}\n        authProvider={authProvider}\n        dataProvider={dataProvider}\n    >\n  {permissions => [\n    permissions === 'admin'\n    ?  <Resource \n            name=\"borne\"\n            list={BorneList}\n            edit={BorneEdit}\n            create={BorneCreate}\n       />   \n       : null,\n    permissions === 'admin'\n    ? <Resource\n            name=\"users\"\n            list={UserList}\n            create={UserCreate}\n    />\n       : null,\n    permissions !== 'admin'\n    ? <Resource\n            name=\"groupe\"\n            list={GroupeList}\n      />\n      : null,\n  ]}\n    </Admin>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}